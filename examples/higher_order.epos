# Higher order functions

add_fn_type: type = fn(int, int) => int
fn add(a: int, b: int): int
  a + b
end

fn add_list(add_fn: fn(int, int) => int, list_of_nums: list(int), num_to_add: int): list(int)
  {
    add_fn(elem(list_of_nums, 0), num_to_add),
    add_fn(elem(list_of_nums, 1), num_to_add),
    add_fn(elem(list_of_nums, 2), num_to_add)
  }
end

list_of_nums: list(int) = {1, 2, 3}
new_list_of_nums: list(int) = add_list(add, list_of_nums, 2)

print(new_list_of_nums) # Should print [3, 4, 5]

# Map fn example
#[
fn map_inner(nums: list(int), fn_to_apply: fn(int) -> int, index: int): list(int)
  {fn_to_apply(elem(nums, index))}
end

fn map(nums: list(int), fn_to_apply: fn(int) -> int): list(int)
  print(fn_to_apply(elem(nums, 0)))
  {1}
end

fn double(num: int): int
  num * 2
end

print(map({1, 2, 3}, double))
]#

test_arr: list(int) = {1, 2, 3}
print(len(test_arr))
print({0, ..test_arr})


#[
fn loop_over_arr(num_fn: fn(int) -> int, arr: list(int), index: int, result: list(int)): list(int)
  match index then
    0 -> result
    _ -> loop_over_arr(num_fn, arr, index - 1, {num_fn(arr[index]), ..result})
  end
end

fn map_over_nums(arr: list(int), fn_to_apply: fn(int) -> int): list(int)
  loop_over_arr(fn_to_apply, arr, len(arr), {})
end

fn double(n: int): int
  n * 2
end
print(map_over_nums({1, 2, 3}, double))
]#
